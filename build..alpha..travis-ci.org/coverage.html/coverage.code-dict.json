{"/home/travis/build/npmtest/node-npmtest-templatizer/test.js":"/* istanbul instrument in package npmtest_templatizer */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-templatizer/lib.npmtest_templatizer.js":"/* istanbul instrument in package npmtest_templatizer */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_templatizer = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_templatizer = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-templatizer/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-templatizer && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_templatizer */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_templatizer\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_templatizer.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_templatizer.rollup.js'] =\n            local.assetsDict['/assets.npmtest_templatizer.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_templatizer.__dirname + '/lib.npmtest_templatizer.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-templatizer/node_modules/templatizer/templatizer.js":"var jade = require('jade');\nvar async = require('async');\nvar beautify = require('./lib/beautify');\nvar simplifyTemplate = require('./lib/simplifyTemplate');\nvar transformMixins = require('./lib/transformMixins');\nvar renameJadeFn = require('./lib/renameJadeFn');\nvar walkdir = require('walkdir');\nvar path = require('path');\nvar util = require('util');\nvar _ = require('lodash');\nvar fs = require('fs');\nvar glob = require('glob');\nvar minimatch = require('minimatch');\nvar namedTemplateFn = require('./lib/namedTemplateFn');\nvar bracketedName = require('./lib/bracketedName');\n\n// Setting dynamicMixins to true will result in\n// all mixins being written to the file\nfunction DynamicMixinsCompiler() {\n    jade.Compiler.apply(this, arguments);\n    this.dynamicMixins = true;\n}\nutil.inherits(DynamicMixinsCompiler, jade.Compiler);\n\n// Our internal namespace\nvar NAMESPACE = 'templatizer';\n\nmodule.exports = function (input, output, options, done) {\n    var args = arguments;\n\n    if (args.length === 3) {\n        // input, output, done\n        if (_.isString(args[1]) && _.isFunction(args[2])) {\n            done = args[2];\n            options = null;\n        }\n        // input, options, done\n        else if (_.isObject(args[1]) && _.isFunction(args[2])) {\n            done = args[2];\n            options = args[1];\n            output = null;\n        }\n    } else if (arguments.length === 2) {\n        // input, done\n        if (_.isFunction(args[1])) {\n            done = args[1];\n            options = null;\n            output = null;\n        }\n        // input, options\n        else if (_.isObject(args[1])) {\n            options = args[1];\n            done = null;\n            output = null;\n        }\n    }\n\n    // Default values for done and options so we dont error\n    done || (done = function (err, compiledOutput) {\n        if (err) {\n            throw err;\n        } else {\n            process.stdout.write(compiledOutput);\n        }\n    });\n    options || (options = {});\n\n    _.defaults(options, {\n        transformMixins: false,\n        jade: {},\n        globOptions: {}\n    });\n\n    var isWindows = process.platform === 'win32';\n    var pathSep = path.sep || (isWindows ? '\\\\' : '/');\n    var pathSepRegExp = /\\/|\\\\/g;\n    var jadeCompileOptions = _.extend({\n        client: true,\n        compileDebug: false,\n        pretty: false\n    }, options.jade);\n    async.waterfall([\n        function (cb) {\n            if (typeof input === \"string\") {\n                glob(input, options.globOptions, cb);\n            } else {\n                cb(null, input);\n            }\n        },\n        function (matches, cb) {\n            var directories = _.chain(matches)\n                .map(function (templateDirectory) {\n                    if (path.extname(templateDirectory).length > 1) {\n                        // Remove filename and ext\n                        return path.dirname(templateDirectory).replace(pathSepRegExp, pathSep);\n                    }\n                    return templateDirectory.replace(pathSepRegExp, pathSep);\n                })\n                .uniq()\n                .value();\n\n            if (!directories || directories.length === 0) {\n                return cb(new Error(input + ' did not match anything existing'));\n            }\n\n            async.each(directories, function (dir, dirDone) {\n                fs.exists(dir, function (exists) {\n                    if (!exists) {\n                        dirDone(new Error('Template directory ' + dir + ' does not exist.'));\n                    } else {\n                        dirDone(null);\n                    }\n                });\n            }, function (err) {\n                cb(err, err ? null : directories);\n            });\n        },\n        function (directories, cb) {\n            var folders = [];\n            var templates = [];\n            var _readTemplates = [];\n            var conflicts = [];\n            async.each(directories, function (dir, dirDone) {\n                var files = [];\n                var walker = walkdir(dir);\n                walker.on('path', function (file) {\n                    files.push(file);\n                });\n\n                walker.on('end', function () {\n                    files.sort();\n                    async.each(files, function (file, done) {\n\n                        var item = file.replace(path.resolve(dir), '').slice(1);\n                        // Skip hidden files\n                        if (item.charAt(0) === '.' || item.indexOf(pathSep + '.') !== -1) {\n                            return done();\n                        }\n\n                        // Skip files not matching the initial globbing pattern\n                        if (options.globOptions.ignore) {\n                            var match = function (ignorePattern) {\n                                return minimatch(file, ignorePattern);\n                            };\n                            if (options.globOptions.ignore.some(match)) {\n                                return done();\n                            }\n                        }\n\n                        if (path.extname(item) === '' && path.basename(item).charAt(0) !== '.') {\n                            if (folders.indexOf(item) === -1) folders.push(item);\n                        } else if (path.extname(item) === '.jade') {\n                            // Store an err if we are about to override a template\n                            if (_readTemplates.indexOf(item) > -1) {\n                                conflicts.push(item + ' from ' + dir + pathSep + item + ' already exists in ' + templates[_readTemplates.indexOf(item)]);\n                            } else {\n                                _readTemplates.push(item);\n                                templates.push(dir + pathSep + item);\n                            }\n                        }\n                        done();\n                    }, function (err) {\n                        if (err) { return dirDone(err); }\n                        if (conflicts.length) {\n                            dirDone(new Error(conflicts.join(', ')));\n                        } else {\n                            dirDone(null);\n                        }\n                    });\n                });\n            }, function (err) {\n                cb(err, { templates: templates, folders: folders, directories: directories });\n            });\n        },\n        function (results, cb) {\n            var directories = results.directories;\n            var folders = results.folders;\n            var templates = results.templates;\n            var compiledOutput = _.sortBy(folders, function (folder) {\n                var arr = folder.split(pathSep);\n                return arr.length;\n            }).map(function (folder) {\n                return NAMESPACE + bracketedName(folder.split(pathSep)) + ' = {};';\n            }).join('\\n') + '\\n';\n            async.eachSeries(templates, function (item, readDone) {\n                fs.readFile(item, { encoding: 'utf-8' }, function (err, rawTemplate) {\n                    if (err) {\n                        readDone(err);\n                    } else {\n                        var name = path.basename(item, '.jade');\n                        var dirString = function () {\n                            var itemTemplateDir = _.find(directories, function (templateDirectory) {\n                                return item.indexOf(templateDirectory + pathSep) === 0;\n                            });\n                            var dirname = path.dirname(item).replace(itemTemplateDir, '');\n                            if (dirname === '.') return name;\n                            dirname += '.' + name;\n                            return dirname.substring(1).replace(pathSepRegExp, '.');\n                        } ();\n\n                        // If we are transforming mixins then use the dynamic\n                        // compiler so unused mixins are never removed\n                        if (options.transformMixins) {\n                            jadeCompileOptions.compiler = DynamicMixinsCompiler;\n                        }\n                        jadeCompileOptions.filename = item;\n\n                        var compiledTemplate;\n                        try {\n                            compiledTemplate = jade.compileClient(rawTemplate, jadeCompileOptions);\n                        } catch (e) {\n                            cb(e);\n                            return;\n                        }\n                        var template = beautify(compiledTemplate.toString());\n                        template = renameJadeFn(template, dirString);\n                        template = simplifyTemplate(template);\n\n                        var mixins = [];\n                        if (options.transformMixins) {\n                            var astResult = transformMixins({\n                                template: template,\n                                name: name,\n                                dir: dirString,\n                                rootName: NAMESPACE\n                            });\n                            mixins = astResult.mixins;\n                            template = astResult.template;\n                        }\n\n                        compiledOutput += namedTemplateFn({\n                            dir: dirString,\n                            rootName: NAMESPACE,\n                            fn: template\n                        });\n\n                        compiledOutput += mixins.join('\\n');\n\n                        readDone(null);\n                    }\n                });\n            }, function (err) {\n                cb(err, compiledOutput);\n            });\n        }\n    ],\n        function (err, compiledOutput) {\n            if (err) {\n                done(err);\n            } else {\n                var commonJSOutput = \"var jade = require('@lukekarrys/jade-runtime');\\n\\n\" +\n                    \"var \" + NAMESPACE + \" = {};\\n\\n\" +\n                    compiledOutput + \"\\n\\n\" +\n                    \"module.exports = \" + NAMESPACE + \";\\n\";\n\n                if (output) {\n                    fs.writeFile(output, commonJSOutput, function (fileErr) {\n                        done(fileErr, fileErr ? null : commonJSOutput);\n                    });\n                } else {\n                    done(null, commonJSOutput);\n                }\n            }\n        });\n};\n","/home/travis/build/npmtest/node-npmtest-templatizer/node_modules/templatizer/lib/beautify.js":"var uglifyjs = require('uglify-js');\n\n\nmodule.exports = function (code) {\n    return uglifyjs.parse(code).print_to_string({beautify: true});\n};","/home/travis/build/npmtest/node-npmtest-templatizer/node_modules/templatizer/lib/simplifyTemplate.js":"var esprima = require('esprima');\nvar escodegen = require('escodegen');\n\n\nmodule.exports = function (func) {\n    var ast = esprima.parse(func);\n\n    var funcRoot = ast.body[0].body.body;\n    if (funcRoot.length === 5) {\n        // determine if there are only the buf declaration, the push of one string and then the return of the buf.join\n        var simpleString = '';\n        var cnt = 0;\n\n        funcRoot.forEach(function (node, i) {\n            // check for buf declare\n            if (i === 0 && node.type === \"VariableDeclaration\" && node.declarations[0].id.name === \"buf\" &&\n                (node.declarations[0].init.elements instanceof Array && node.declarations[0].init.elements.length === 0)) {\n                cnt++;\n            }\n\n            // check for jade_mixins declare\n            if (i === 1 && node.type === \"VariableDeclaration\" && node.declarations[0].id.name === \"jade_mixins\" &&\n                (node.declarations[0].init.type === 'ObjectExpression' && node.declarations[0].init.properties.length === 0)) {\n                cnt++;\n            }\n\n            // check for jade_interp declare\n            if (i === 2 && node.type === \"VariableDeclaration\" && node.declarations[0].id.name === \"jade_interp\" &&\n                (node.declarations[0].init === null)) {\n                cnt++;\n            }\n\n            // check for single string push\n            if (i === 3 && node.type === \"ExpressionStatement\" && node.expression.callee && node.expression.callee.object.name === \"buf\" &&\n                node.expression.arguments.length === 1 && node.expression.arguments[0].type === \"Literal\") {\n                // save the simple string\n                simpleString = node.expression.arguments[0].value;\n                cnt++;\n            }\n\n            // check for buf join\n            if (i === 4 && node.type === \"ReturnStatement\" && node.argument.callee.object.name === \"buf\" &&\n                node.argument.callee.property.name === \"join\" && node.argument.arguments.length === 1  && node.argument.arguments[0].value === '') {\n                cnt++;\n            }\n        });\n\n        // All the conditions were met, it's a simple template\n        if (cnt === 5) {\n            // replace the funcRoot with a simple return;\n            var simpleRoot = [{\n                type: 'ReturnStatement',\n                argument: {\n                    type: 'Literal',\n                    value: simpleString\n                }\n            }];\n            ast.body[0].body.body = simpleRoot;\n\n            //remove function parameter\n            ast.body[0].params = [];\n        }\n    }\n\n    return escodegen.generate(ast);\n};","/home/travis/build/npmtest/node-npmtest-templatizer/node_modules/templatizer/lib/transformMixins.js":"var escodegen = require('escodegen');\nvar falafel = require('falafel');\nvar namedTemplateFn = require('./namedTemplateFn');\nvar bracketedName = require('./bracketedName');\nvar templateName = require('./templateName');\n\n\nfunction bufDeclartion(name) {\n    return {\n        \"type\": \"VariableDeclarator\",\n        \"id\": {\n            \"type\": \"Identifier\",\n            \"name\": name || \"buf\"\n        },\n        \"init\": {\n            \"type\": \"ArrayExpression\",\n            \"elements\": []\n        }\n    };\n}\n\nfunction jadeInterpDeclaration() {\n    return {\n        \"type\": \"VariableDeclarator\",\n        \"id\": {\n            \"type\": \"Identifier\",\n            \"name\": \"jade_interp\"\n        }\n    };\n}\n\nfunction returnBuf(name) {\n    return {\n        \"type\": \"ReturnStatement\",\n        \"argument\": {\n            \"type\": \"CallExpression\",\n            \"callee\": {\n                \"type\": \"MemberExpression\",\n                \"computed\": false,\n                \"object\": {\n                    \"type\": \"Identifier\",\n                    \"name\": name || \"buf\"\n                },\n                \"property\": {\n                    \"type\": \"Identifier\",\n                    \"name\": \"join\"\n                }\n            },\n            \"arguments\": [\n                {\n                    \"type\": \"Literal\",\n                    \"value\": \"\",\n                    \"raw\": \"\\\"\\\"\"\n                }\n            ]\n        }\n    };\n}\n\nfunction transformMixinCalls(node, options) {\n    var mixinName;\n    var mixinInvocation;\n    var newCall;\n\n    // Check all fn calls to see if they are mixins\n    if (\n        node.type === 'ExpressionStatement' &&\n        node.expression.type === 'CallExpression' &&\n        node.expression.callee &&\n        node.expression.callee.object &&\n        (\n            node.expression.callee.object.name === 'jade_mixins' ||\n            (\n                node.expression.callee.object.object &&\n                node.expression.callee.object.object.name === 'jade_mixins'\n            )\n        )\n    ) {\n        \n        var callee = node.expression.callee;\n        var calleeProp = callee.property;\n        var calleeObject = callee.object;\n\n        mixinName = (calleeProp && calleeProp.value) ||\n            (calleeObject && calleeObject.property && calleeObject.property.value);\n\n        mixinInvocation = options.rootName + bracketedName(options.dir.split('.'));\n\n        if (mixinName) {\n            mixinInvocation += bracketedName([mixinName]);\n        } else {\n            mixinInvocation += \"[\" + escodegen.generate(calleeProp) + \"]\";\n        }\n\n        // Call the function from templatizer and its path\n        // Also send the func return val to the buffer array\n        newCall = 'buf.push(' + mixinInvocation;\n        // TODO: makde this use falafel/escodegen instead of regex replacement\n        newCall = node.source().replace(/^jade_mixins\\[.*?\\]([\\s\\S]*);$/gm, newCall + '$1);');\n\n        // TODO: use codegen to add buf to block\n        // Use the buf that is scoped to the mixin for the block\n        newCall = newCall.replace('block: function () {', 'block: function (buf) {');\n\n        node.update(newCall);\n    }\n}\n\nfunction findAndReplaceMixin(node, options) {\n    var mixinName;\n    var mixinStatements;\n    var mixin = '';\n\n    // Check all assignments to see if they are mixins\n    if (\n        node.type === 'ExpressionStatement' &&\n        node.expression.type === 'AssignmentExpression' &&\n        node.expression.left &&\n        node.expression.left.object &&\n        node.expression.left.object.name === 'jade_mixins'\n    ) {\n        mixinName = node.expression.left.property.value;\n        mixinStatements = node.expression.right.right.body.body;\n\n        // Add buffer array to variable declarations\n        mixinStatements[0].declarations.push(bufDeclartion());\n\n        // Add jade_interp declaration for use in 'strict mode'\n        mixinStatements[0].declarations.push(jadeInterpDeclaration());\n\n        // Return the buffer joined as a string from the function\n        mixinStatements.push(returnBuf());\n\n        // Update the node\n        node.expression.update(escodegen.generate(node.expression));\n\n        // Make the mixin a named function declaration\n        node.expression.right.right.type = 'FunctionDeclaration';\n        node.expression.right.right.id = {\n            \"type\": \"Identifier\",\n            \"name\": templateName(options.dir + '_' + mixinName)\n        };\n\n        // Traverse newly updated mixin functions for calls to other mixins\n        mixin = falafel(escodegen.generate(node.expression.right.right), function (node) {\n            transformMixinCalls(node, options);\n        }).toString();\n\n        // TODO: use codegen to add buf to block\n        // Use the buf scoped to the mixin for each block\n        mixin = mixin.replace(/block && block\\(\\);/g, 'block && block(buf);');\n\n        // Add a commented and named function to be returned\n        mixin = namedTemplateFn({\n            fn: mixin,\n            rootName: options.rootName,\n            dir: options.dir,\n            mixinName: mixinName\n        });\n\n        // Remove the previous creation of the mixin function\n        node.update('');\n    }\n\n    return mixin;\n}\n\nmodule.exports = function (options) {\n    var mixins = [];\n\n    var template = falafel(options.template, function (node) {\n        var mixin = findAndReplaceMixin(node, options);\n        if (mixin) mixins.push(mixin);\n        transformMixinCalls(node, options);\n    });\n\n    return {\n        template: template,\n        mixins: mixins\n    };\n};\n\n","/home/travis/build/npmtest/node-npmtest-templatizer/node_modules/templatizer/lib/namedTemplateFn.js":"var path = require('path');\nvar bracketedName = require('./bracketedName');\nvar beautify = require('./beautify');\n\nfunction toFileName(name) {\n    return name.replace(/\\./g, path.sep);\n}\n\nfunction toVarName(name) {\n    return bracketedName(name.split('.'));\n}\n\nmodule.exports = function (options) {\n    var fileName = toFileName(options.dir) + '.jade';\n    var varName = toVarName(options.dir);\n\n    if (options.mixinName) {\n        fileName += ':' + toFileName(options.mixinName);\n        varName += toVarName(options.mixinName);\n    }\n\n    return [\n        '',\n        '// ' + fileName + ' compiled template',\n        beautify(options.rootName + varName + ' = ' + options.fn + (options.fn.toString().slice(-1) === ';' ? '' : ';')),\n        ''\n    ].join('\\n');\n};","/home/travis/build/npmtest/node-npmtest-templatizer/node_modules/templatizer/lib/bracketedName.js":"module.exports = function (name) {\n    return '[\"' + name.join('\"][\"') + '\"]';\n};","/home/travis/build/npmtest/node-npmtest-templatizer/node_modules/templatizer/lib/templateName.js":"module.exports = function (name) {\n    return 'tmpl_' + name.replace(/[^A-Za-z0-9]/g, '_');\n};","/home/travis/build/npmtest/node-npmtest-templatizer/node_modules/templatizer/lib/renameJadeFn.js":"var esprima = require('esprima');\nvar escodegen = require('escodegen');\nvar tmplName = require('./templateName');\n\n\nmodule.exports = function (func, name) {\n    var ast = esprima.parse(func);\n    ast.body[0].id.name = tmplName(name);\n    return escodegen.generate(ast);\n};\n"}